{"version":3,"sources":["panels/Scanner.js","App.js","index.js"],"names":["Scanner","onBridgeResult","e","console","log","JSON","stringify","detail","type","setState","qrResult","data","openScanner","bridge","send","state","undefined","subscribe","this","onClick","size","React","Component","App","MainView","withAdaptivity","viewWidth","platform","usePlatform","useState","activeStory","setActiveStory","onStoryChange","currentTarget","dataset","story","isDesktop","ViewWidth","TABLET","hasHeader","VKCOM","header","separator","style","justifyContent","animate","spaced","width","maxWidth","tabbar","selected","text","id","activePanel","height","ReactDOM","render","document","getElementById"],"mappings":"wPA+CiBA,E,kDAzChB,aAAc,IAAD,8BACN,gBAQJC,eAAiB,SAACC,GAEd,GADAC,QAAQC,IAAI,cAAgBC,KAAKC,UAAUJ,IAElC,iCADDA,EAAEK,OAAOC,KAET,EAAKC,SAAS,CAACC,SAAWR,EAAEK,OAAOI,QAbrC,EAuBVC,YAAc,WACVC,IAAOC,KAAK,2BAtBZ,EAAKC,MAAQ,CACTL,cAAWM,GAHT,E,qDAMV,WACIH,IAAOI,UAAUC,KAAKjB,kB,oBAyB7B,WACE,OACD,gCACU,cAAC,IAAD,CAAQkB,QAASD,KAAKN,YAAaQ,KAAK,IAAxC,oBACCF,KAAKH,MAAML,UAAY,4BAAIL,KAAKC,UAAUY,KAAKH,MAAML,mB,GAtC5CW,IAAMC,WCGtBC,E,kDAEL,aAAc,wC,0CAId,WACE,OACD,cAAC,IAAD,UACC,cAAC,IAAD,UACC,cAACC,EAAD,Y,GAVcH,IAAMC,WAiBPC,IAETC,EAAWC,aAAe,YAAoB,IAAjBC,EAAgB,EAAhBA,UAC9BC,EAAWC,cACjB,EAAsCP,IAAMQ,SAAS,WAArD,mBAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAgB,SAAC9B,GAAD,OAAO6B,EAAe7B,EAAE+B,cAAcC,QAAQC,QAC9DC,EAAYV,GAAaW,IAAUC,OACnCC,EAAYZ,IAAaa,IAE/B,OACE,cAAC,IAAD,CACDC,OAAQF,GAAa,cAAC,IAAD,CAAaG,WAAW,IAC7CC,MAAO,CAAEC,eAAgB,UAFxB,SAMD,cAAC,IAAD,CACEC,SAAUT,EACVU,OAAQV,EACRW,MAAOX,EAAY,QAAU,OAC7BY,SAAUZ,EAAY,QAAU,OAJlC,SAME,eAAC,IAAD,CAAMN,YAAaA,EAAamB,QAASb,GAC1C,eAAC,IAAD,WACE,cAAC,IAAD,CACDjB,QAASa,EACTkB,SAA0B,YAAhBpB,EACV,aAAW,UACXqB,KAAK,yCAGJ,cAAC,IAAD,CACDhC,QAASa,EACTkB,SAA0B,YAAhBpB,EACV,aAAW,UACXqB,KAAK,kDAbL,UAoBD,cAAC,IAAD,CAAMC,GAAG,UAAUC,YAAY,UAA/B,SACE,eAAC,IAAD,CAAOD,GAAG,UAAV,UACD,cAAC,IAAD,mDAIA,cAAC,EAAD,SAGD,cAAC,IAAD,CAAMA,GAAG,UAAUC,YAAY,UAA/B,SACE,eAAC,IAAD,CAAOD,GAAG,UAAV,UACD,cAAC,IAAD,yDACA,cAAC,IAAD,CAAOT,MAAO,CAAEW,OAAQ,0BAUvB,CACJ5B,WAAW,IAIV6B,IAASC,OACV,cAAC,EAAD,IAECC,SAASC,eAAe,SC1F1B7C,IAAOC,KAAK,gBAEZyC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d5beaac6.chunk.js","sourcesContent":["import React from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport { Button } from '@vkontakte/vkui';\n\nclass Scanner extends React.Component {\n   \n\tconstructor(){\n        super()\n        this.state = {\n            qrResult : undefined\n        }\n    }\n    componentDidMount(){\n        bridge.subscribe(this.onBridgeResult);\n    }\n    onBridgeResult = (e) => {\n        console.log(\"bridge e = \" + JSON.stringify(e))\n        switch (e.detail.type) {\n            case \"VKWebAppOpenCodeReaderResult\":\n                this.setState({qrResult : e.detail.data})\n            break;\n            case \"VKWebAppOpenCodeReaderFailed\":\n\n            break;\n      \n            default:\n            break;\n        }\n    }\n    openScanner = () => {\n        bridge.send(\"VKWebAppOpenCodeReader\")\n        // .then(data => { \n        //         this.setState({flashDetails : \"\"})\n        // }) \n        // .catch(error => { \n        //     this.setState({flashDetails : \"Нет доступа к Камере\"})\n        // });\n    }\n\trender() {\n\t  return (\n\t\t<div>\n            <Button onClick={this.openScanner} size=\"m\">Medium</Button>\n            {this.state.qrResult && <p>{JSON.stringify(this.state.qrResult)}</p>}\n        </div>\n\t  )\n\t}\n  }\n  export default Scanner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { View, ScreenSpinner, Tabbar, TabbarItem, Epic ,AdaptivityProvider, AppRoot, withAdaptivity, usePlatform, ViewWidth, VKCOM, SplitLayout, SplitCol,Group, Panel, Cell, PanelHeader } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport './styles/styles.css'\nimport Scanner from './panels/Scanner';\n\nclass App extends React.Component {\n   \n\tconstructor(){\n\t\tsuper()\n\t}\n\n\trender() {\n\t  return (\n\t\t<AdaptivityProvider>\n\t\t\t<AppRoot>\n\t\t\t\t<MainView/>\n\t\t\t\t\n\t\t\t</AppRoot>\n\t\t</AdaptivityProvider>\n\t  )\n\t}\n  }\n  export default App;\n  \n  const MainView = withAdaptivity(({ viewWidth }) => {\n\tconst platform = usePlatform();\n\tconst [activeStory, setActiveStory] = React.useState('scanner');\n\tconst onStoryChange = (e) => setActiveStory(e.currentTarget.dataset.story);\n\tconst isDesktop = viewWidth >= ViewWidth.TABLET;\n\tconst hasHeader = platform !== VKCOM;\n  \n\treturn (\n\t  <SplitLayout\n\t\theader={hasHeader && <PanelHeader separator={false} />}\n\t\tstyle={{ justifyContent: \"center\" }}\n\t  >\n\t\t\n  \n\t\t<SplitCol\n\t\t  animate={!isDesktop}\n\t\t  spaced={isDesktop}\n\t\t  width={isDesktop ? '560px' : '100%'}\n\t\t  maxWidth={isDesktop ? '560px' : '100%'}\n\t\t>\n\t\t  <Epic activeStory={activeStory} tabbar={!isDesktop &&\n\t\t\t<Tabbar>\n\t\t\t  <TabbarItem\n\t\t\t\tonClick={onStoryChange}\n\t\t\t\tselected={activeStory === 'scanner'}\n\t\t\t\tdata-story=\"scanner\"\n\t\t\t\ttext=\"Сканер\"\n\t\t\t  >\n\t\t\t</TabbarItem>\n\t\t\t  <TabbarItem\n\t\t\t\tonClick={onStoryChange}\n\t\t\t\tselected={activeStory === 'history'}\n\t\t\t\tdata-story=\"history\"\n\t\t\t\ttext=\"История\"\n\t\t\t  >\n\n\t\t\t  </TabbarItem>\n\t\t\t \n\t\t\t</Tabbar>\n\t\t  }>\n\t\t\t<View id=\"scanner\" activePanel=\"scanner\">\n\t\t\t  <Panel id=\"scanner\">\n\t\t\t\t<PanelHeader>Сканер</PanelHeader>\n\t\t\t\t{/* <Group style={{ height: '1000px' }}>\n\t\t\t\t  \n\t\t\t\t</Group> */}\n\t\t\t\t<Scanner/>\n\t\t\t  </Panel>\n\t\t\t</View>\n\t\t\t<View id=\"history\" activePanel=\"history\">\n\t\t\t  <Panel id=\"history\">\n\t\t\t\t<PanelHeader>История</PanelHeader>\n\t\t\t\t<Group style={{ height: '1000px' }}>\n\t\t\t\t  \n\t\t\t\t</Group>\n\t\t\t  </Panel>\n\t\t\t</View>\n\t\t\t\n\t\t  </Epic>\n\t\t</SplitCol>\n\t  </SplitLayout>\n\t);\n  }, {\n\tviewWidth: true\n  });\n  \n  <MainView />\n  ReactDOM.render(\n\t<App/>\n  ,\n  document.getElementById('root')\n  );","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}